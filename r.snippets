snippet !lib "Basic libraries" b
library <- function(...) {
  suppressPackageStartupMessages(base::library(...))
}
library(tidyverse)
library(counsylthemes)
library(glue)
library(here)
library(prequel)
library(nexusr)
library(fs)
library(usethis)
theme_set(theme_counsyl())
endsnippet

snippet !reload "Reload a library" b
devtools::reload(devtools::inst("$1"))
endsnippet

snippet !sb "Sandbox" b
## -- sandbox starts --
${1}
## -- sandbox ends --
endsnippet

snippet !shared "shared" b
shared <- new.env()
source("src/shared.R", local=shared)
endsnippet

snippet !vector "Description" b
$0 <- `!p
x = snip.v.text
x = x.strip("\n")
x = x.split("\n")
x = ['"' + i + '"' for i in x if x is not "\n"]
snip.rv = "c(" + ",".join(x) + ")"
`
endsnippet

snippet analysis "analysis script template" b

"usage: `!p snip.rv=snip.fn` [--inputdir INPUTDIR] [--outputdir OUTPUTDIR]

options:
--inputdir INPUTDIR    input directory [default: models/basic_model.stan]
--outputdir OUTPUTDIR  output directory [default: ./results/noname_hashvalue]

" -> doc

opts <- docopt::docopt(doc)
docoptutils::print_defined(as.environment(opts))


 housekeeping ----
runtempdir <- tempdir()
runfolder  <- file.path(runtempdir, unique_dirname)

 libs ----

 main ----

write_in_runfolder(res, "test.rds")

 results transfer ----
dir.create(opts$OUTPUTDIR, recursive = TRUE, showWarnings=FALSE)
file.copy(runfolder, OUTPUTDIR, recursive=TRUE)
file.copy(sink_log, file.path(unique_dirname, "runtime.output.log"))

endsnippet

snippet doc "add roxygen2 snippet" b
#' ${1:Title}
#'
#' @param env
#'
#' @return
#' @export
endsnippet

snippet docopt
"usage: ${1:SCRIPT_NAME} [ --input-df INPUT_DF]

options:
--input-df INPUT_DF  ${2:input csv file}
" -> doc

library(methods)
library(docopt)
opts <- docopt(doc)
endsnippet

snippet memoise "Description" b
suppressPackageStartupMessages(library(memoise))
memcache <- memoise::cache_filesystem("~/.r.cache")
endsnippet

snippet uuid "UUID" !b
`!p import uuid
if not snip.c:
    snip.rv = uuid.uuid4().hex`
endsnippet

snippet !importFrom "Description" b
#' @importFrom purrr map
#' @importFrom dplyr bind_rows filter mutate
#' @importFrom magrittr %>%
endsnippet

snippet !func "Description"
funcname <- function() {
}
endsnippet


snippet !sep "Separator" b
# -----------------------------------------------------------------
endsnippet


snippet !!sep "Description" b
`!p
SEP_DEFAULT_SIZE = 70
x = snip.v.text
x = x.strip()
text_len = len(x)
if text_len > 0:
   remainder = SEP_DEFAULT_SIZE - (text_len + 2)
   sep = "-" * remainder
   snip.rv = f"# {x} {sep}"
`
endsnippet

snippet meta "Description" b
#' ---
#' title: "$1"
#' author: "Albert Lee"
#' date: "\`r Sys.Date()\`"
#' output:
#'   rmdformats::readthedown:
#'     code_folding: hide
#'     lightbox: true
#'     gallery: true
#'     fig_caption: true
#'     fig_width: 14
#'     fig_height: 8
#'     df_print: kable
#'     number_sections: true
#' ---

#+ include=FALSE
knitr::opts_chunk$set(eval = FALSE)

display_graphics <- function(path) {
	knitr::include_graphics(normalizePath(path))
}

library <- function(...) {
  suppressPackageStartupMessages(base::library(...))
}

endsnippet


snippet !s "Description" b
#'
#' ---
#'
endsnippet

snippet !h1 "Description" b


#'
#' ---
#'
#' # ${1: Title}

${0}
endsnippet

snippet !h2 "Description" b


#'
#' ---
#'
#' ## ${1: Title}

${0}
endsnippet


snippet !m "Description" b
${VISUAL:inside text/^/#' /mg}
endsnippet

snippet !c "Description" b
${VISUAL:inside text/^#('|\+) //mg}
endsnippet


snippet !titlecase "Title transformation"
${1:a text}
${1/\w+\s*/\u$0/g:test}
endsnippet


snippet !test "Description" b
test_that("${1:Name your test}", {

	${0}

})
endsnippet
